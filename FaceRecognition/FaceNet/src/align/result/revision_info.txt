arguments: align_dataset_mtcnn.py
--------------------
tensorflow version: 1.4.0
--------------------
git hash: b'daeb6b60e49dd1ed7193be003453ec52f7b3afcd'
--------------------
b'diff --git a/FaceRecognition/FaceNet/src/align/align_dataset_mtcnn.py b/FaceRecognition/FaceNet/src/align/align_dataset_mtcnn.py\nindex 7d5e735..649e9e9 100644\n--- a/FaceRecognition/FaceNet/src/align/align_dataset_mtcnn.py\n+++ b/FaceRecognition/FaceNet/src/align/align_dataset_mtcnn.py\n@@ -28,15 +28,58 @@ from __future__ import print_function\n from scipy import misc\n import sys\n import os\n-import argparse\n import tensorflow as tf\n import numpy as np\n-import facenet\n-import align.detect_face\n+from FaceRecognition.FaceNet.src import facenet,align\n+from FaceRecognition.FaceNet.src.align import detect_face\n import random\n from time import sleep\n+import argparse\n+\n+"""parsing and configuration"""\n+def parse_args():\n+    desc = "Tensorflow implementation of Face Alignment"\n+    parser = argparse.ArgumentParser(description=desc)\n+\n+    parser.add_argument(\'--input_dir\', type=str, help=\'Directory with unaligned images.\', default=\'../../data/\')\n+    parser.add_argument(\'--output_dir\', type=str, help=\'Directory with aligned face thumbnails.\', default=\'./result\')\n+    parser.add_argument(\'--image_size\', type=int,\n+        help=\'Image size (height, width) in pixels.\', default=182)\n+    parser.add_argument(\'--margin\', type=int,\n+        help=\'Margin for the crop around the bounding box (height, width) in pixels.\', default=44)\n+    parser.add_argument(\'--random_order\', \n+        help=\'Shuffles the order of images to enable alignment using multiple processes.\', action=\'store_true\')\n+    parser.add_argument(\'--gpu_memory_fraction\', type=float,\n+        help=\'Upper bound on the amount of GPU memory that will be used by the process.\', default=1.0)\n+    parser.add_argument(\'--detect_multiple_faces\', type=bool,\n+                        help=\'Detect and align multiple faces per image.\', default=False)\n+\n+    return check_args(parser.parse_args())\n+\n+"""checking arguments"""\n+def check_args(args):\n+    try:\n+        assert os.path.exists(args.input_dir)\n+    except:\n+        print(\'There is no such path%s\'%args.input_dir)\n+        return None\n+\n+    try:\n+        assert os.path.exists(args.output_dir)\n+    except:\n+        print(\'There is no such path%s\'%args.output_dir)\n+        return None\n+\n+    return args\n+\n+"""main"""\n+def main():\n+\n+    # parse arguments\n+    args = parse_args()\n+    if args is None:\n+        exit()\n \n-def main(args):\n     sleep(random.random())\n     output_dir = os.path.expanduser(args.output_dir)\n     if not os.path.exists(output_dir):\n@@ -137,23 +180,5 @@ def main(args):\n     print(\'Total number of images: %d\' % nrof_images_total)\n     print(\'Number of successfully aligned images: %d\' % nrof_successfully_aligned)\n             \n-\n-def parse_arguments(argv):\n-    parser = argparse.ArgumentParser()\n-    \n-    parser.add_argument(\'input_dir\', type=str, help=\'Directory with unaligned images.\')\n-    parser.add_argument(\'output_dir\', type=str, help=\'Directory with aligned face thumbnails.\')\n-    parser.add_argument(\'--image_size\', type=int,\n-        help=\'Image size (height, width) in pixels.\', default=182)\n-    parser.add_argument(\'--margin\', type=int,\n-        help=\'Margin for the crop around the bounding box (height, width) in pixels.\', default=44)\n-    parser.add_argument(\'--random_order\', \n-        help=\'Shuffles the order of images to enable alignment using multiple processes.\', action=\'store_true\')\n-    parser.add_argument(\'--gpu_memory_fraction\', type=float,\n-        help=\'Upper bound on the amount of GPU memory that will be used by the process.\', default=1.0)\n-    parser.add_argument(\'--detect_multiple_faces\', type=bool,\n-                        help=\'Detect and align multiple faces per image.\', default=False)\n-    return parser.parse_args(argv)\n-\n if __name__ == \'__main__\':\n-    main(parse_arguments(sys.argv[1:]))\n+    main()\ndiff --git a/FaceRecognition/FaceNet/src/align/detect_face.py b/FaceRecognition/FaceNet/src/align/detect_face.py\nindex 7f98ca7..ab43af0 100644\n--- a/FaceRecognition/FaceNet/src/align/detect_face.py\n+++ b/FaceRecognition/FaceNet/src/align/detect_face.py\n@@ -207,9 +207,9 @@ class Network(object):\n     """\n     @layer\n     def softmax(self, target, axis, name=None):\n-        max_axis = tf.reduce_max(target, axis, keepdims=True)\n+        max_axis = tf.reduce_max(target, axis, keep_dims=True)\n         target_exp = tf.exp(target-max_axis)\n-        normalize = tf.reduce_sum(target_exp, axis, keepdims=True)\n+        normalize = tf.reduce_sum(target_exp, axis, keep_dims=True)\n         softmax = tf.div(target_exp, normalize, name)\n         return softmax\n     \ndiff --git a/FaceRecognition/demo/.gitignore b/FaceRecognition/demo/.gitignore\ndeleted file mode 100644\nindex b4daf52..0000000\n--- a/FaceRecognition/demo/.gitignore\n+++ /dev/null\n@@ -1,104 +0,0 @@\n-# Byte-compiled / optimized / DLL files\n-__pycache__/\n-*.py[cod]\n-*$py.class\n-\n-# C extensions\n-*.so\n-.idea/\n-# Distribution / packaging\n-.Python\n-build/\n-develop-eggs/\n-dist/\n-downloads/\n-eggs/\n-.eggs/\n-lib/\n-lib64/\n-parts/\n-sdist/\n-var/\n-wheels/\n-*.egg-info/\n-.installed.cfg\n-*.egg\n-MANIFEST\n-\n-# PyInstaller\n-#  Usually these files are written by a python script from a template\n-#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n-*.manifest\n-*.spec\n-\n-# Installer logs\n-pip-log.txt\n-pip-delete-this-directory.txt\n-\n-# Unit test / coverage reports\n-htmlcov/\n-.tox/\n-.coverage\n-.coverage.*\n-.cache\n-nosetests.xml\n-coverage.xml\n-*.cover\n-.hypothesis/\n-.pytest_cache/\n-\n-# Translations\n-*.mo\n-*.pot\n-\n-# Django stuff:\n-*.log\n-local_settings.py\n-db.sqlite3\n-\n-# Flask stuff:\n-instance/\n-.webassets-cache\n-\n-# Scrapy stuff:\n-.scrapy\n-\n-# Sphinx documentation\n-docs/_build/\n-\n-# PyBuilder\n-target/\n-\n-# Jupyter Notebook\n-.ipynb_checkpoints\n-\n-# pyenv\n-.python-version\n-\n-# celery beat schedule file\n-celerybeat-schedule\n-\n-# SageMath parsed files\n-*.sage.py\n-\n-# Environments\n-.env\n-.venv\n-env/\n-venv/\n-ENV/\n-env.bak/\n-venv.bak/\n-\n-# Spyder project settings\n-.spyderproject\n-.spyproject\n-\n-# Rope project settings\n-.ropeproject\n-\n-# mkdocs documentation\n-/site\n-\n-# mypy\n-.mypy_cache/\ndiff --git a/FaceRecognition/demo/README.md b/FaceRecognition/demo/README.md\ndeleted file mode 100644\nindex 64efcfa..0000000\n--- a/FaceRecognition/demo/README.md\n+++ /dev/null\n@@ -1,18 +0,0 @@\n-# \xe4\xbd\xbf\xe7\x94\xa8TensorFlow\xe8\xae\xad\xe7\xbb\x83\xe4\xba\xba\xe8\x84\xb8\xe8\xaf\x86\xe5\x88\xab\xe6\xa8\xa1\xe5\x9e\x8b\n-\n-## \xe7\x9b\xae\xe5\xbd\x95\xe4\xbb\x8b\xe7\xbb\x8d\n-> * `lwf_dataset`: LWF\xe5\xb8\xa6\xe6\xa0\x87\xe7\xad\xbe\xe7\x9a\x84\xe4\xba\xba\xe8\x84\xb8\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n-> * `my_faces`: \xe6\x88\x91\xe7\x9a\x84\xe7\x85\xa7\xe7\x89\x87\n-> * `other_faces`: \xe4\xbb\x8eLWF\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xad\xe6\x8f\x90\xe5\x8f\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xba\xe8\x84\xb8\xe5\x9b\xbe\xe5\x83\x8f\n-> * `tmp`: \xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe7\xbb\x93\xe6\x9e\x9c\n-> * `get_my_faces.py`: \xe9\x80\x9a\xe8\xbf\x87\xe6\x91\x84\xe5\x83\x8f\xe5\xa4\xb4\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\xac\xe4\xba\xba\xe8\x84\xb8\xe7\x9a\x84\xe7\x85\xa7\xe7\x89\x87\n-> * `is_my_face.py`: \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\x9c\xac\xe4\xba\xba\xe7\x9a\x84\xe8\x84\xb8\n-> * `set_other_people.py`: \xe4\xbb\x8elwf_dataset\xe4\xb8\xad\xe6\x8f\x90\xe5\x8f\x96\xe5\x87\xba\xe4\xba\xba\xe8\x84\xb8\n-> * `train_faces.py`: \xe4\xba\xba\xe8\x84\xb8\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x87\xe7\xa8\x8b\n-\n-**\xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a**\n-\n-* \xe7\xa8\x8b\xe5\xba\x8f\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf`dlib`\xe6\x9d\xa5\xe8\xaf\x86\xe5\x88\xab\xe4\xba\xba\xe8\x84\xb8\xe9\x83\xa8\xe5\x88\x86\n-* LFW\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\xbd\x91\xe7\xab\x99\xef\xbc\x9ahttp://vis-www.cs.umass.edu/lfw/\n-* \xe4\xbd\xbf\xe7\x94\xa8CNN\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\x9e\x8b\n-* \xe6\xa8\xa1\xe5\x9e\x8b\xe8\xaf\x86\xe5\x88\xab\xe8\xbf\x87\xe7\xa8\x8b\xef\xbc\x9a\xe8\xbf\x90\xe8\xa1\x8c`is_my_face.py`\xe7\xa8\x8b\xe5\xba\x8f\xef\xbc\x8c\xe8\xae\xa9\xe6\x91\x84\xe5\x83\x8f\xe5\xa4\xb4\xe6\x8b\x8d\xe5\x88\xb0\xe6\x9c\xac\xe4\xba\xba\xe5\x8d\xb3\xe5\x8f\xaf\n\\ No newline at end of file\ndiff --git a/FaceRecognition/demo/ckpt/.gitignore b/FaceRecognition/demo/ckpt/.gitignore\ndeleted file mode 100644\nindex 8590cd8..0000000\n--- a/FaceRecognition/demo/ckpt/.gitignore\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# ignore all except .gitignore file\n-*\n-!.gitignore\n\\ No newline at end of file\ndiff --git a/FaceRecognition/demo/get_my_faces.py b/FaceRecognition/demo/get_my_faces.py\ndeleted file mode 100644\nindex 16c2ec0..0000000\n--- a/FaceRecognition/demo/get_my_faces.py\n+++ /dev/null\n@@ -1,67 +0,0 @@\n-import cv2\n-import dlib\n-import os\n-import sys\n-import random\n- \n-output_dir = \'./my_faces\'\n-size = 64\n- \n-if not os.path.exists(output_dir):\n-    os.makedirs(output_dir)\n- \n-# \xe6\x94\xb9\xe5\x8f\x98\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe4\xba\xae\xe5\xba\xa6\xe4\xb8\x8e\xe5\xaf\xb9\xe6\xaf\x94\xe5\xba\xa6\n-def relight(img, light=1, bias=0):\n-    w = img.shape[1]\n-    h = img.shape[0]\n-    #image = []\n-    for i in range(0,w):\n-        for j in range(0,h):\n-            for c in range(3):\n-                tmp = int(img[j,i,c]*light + bias)\n-                if tmp > 255:\n-                    tmp = 255\n-                elif tmp < 0:\n-                    tmp = 0\n-                img[j,i,c] = tmp\n-    return img\n- \n-#\xe4\xbd\xbf\xe7\x94\xa8dlib\xe8\x87\xaa\xe5\xb8\xa6\xe7\x9a\x84frontal_face_detector\xe4\xbd\x9c\xe4\xb8\xba\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe6\x8f\x90\xe5\x8f\x96\xe5\x99\xa8\n-detector = dlib.get_frontal_face_detector()\n-# \xe6\x89\x93\xe5\xbc\x80\xe6\x91\x84\xe5\x83\x8f\xe5\xa4\xb4 \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xe8\xbe\x93\xe5\x85\xa5\xe6\xb5\x81\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe6\x91\x84\xe5\x83\x8f\xe5\xa4\xb4\xe6\x88\x96\xe8\xa7\x86\xe9\xa2\x91\xe6\x96\x87\xe4\xbb\xb6\n-camera = cv2.VideoCapture(0)\n- \n-index = 1\n-while True:\n-    if (index <= 10000):\n-        print(\'Being processed picture %s\' % index)\n-        # \xe4\xbb\x8e\xe6\x91\x84\xe5\x83\x8f\xe5\xa4\xb4\xe8\xaf\xbb\xe5\x8f\x96\xe7\x85\xa7\xe7\x89\x87\n-        success, img = camera.read()\n-        # \xe8\xbd\xac\xe4\xb8\xba\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\xe7\x89\x87\n-        gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n-        # \xe4\xbd\xbf\xe7\x94\xa8detector\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xba\xe8\x84\xb8\xe6\xa3\x80\xe6\xb5\x8b\n-        dets = detector(gray_img, 1)\n- \n-        for i, d in enumerate(dets):\n-            x1 = d.top() if d.top() > 0 else 0\n-            y1 = d.bottom() if d.bottom() > 0 else 0\n-            x2 = d.left() if d.left() > 0 else 0\n-            y2 = d.right() if d.right() > 0 else 0\n- \n-            face = img[x1:y1,x2:y2]\n-            # \xe8\xb0\x83\xe6\x95\xb4\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xaf\xb9\xe6\xaf\x94\xe5\xba\xa6\xe4\xb8\x8e\xe4\xba\xae\xe5\xba\xa6\xef\xbc\x8c \xe5\xaf\xb9\xe6\xaf\x94\xe5\xba\xa6\xe4\xb8\x8e\xe4\xba\xae\xe5\xba\xa6\xe5\x80\xbc\xe9\x83\xbd\xe5\x8f\x96\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe8\x83\xbd\xe5\xa2\x9e\xe5\x8a\xa0\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe5\xa4\x9a\xe6\xa0\xb7\xe6\x80\xa7\n-            face = relight(face, random.uniform(0.5, 1.5), random.randint(-50, 50))\n- \n-            face = cv2.resize(face, (size,size))\n- \n-            cv2.imshow(\'image\', face)\n- \n-            cv2.imwrite(output_dir+\'/\'+str(index)+\'.jpg\', face)\n- \n-            index += 1\n-        key = cv2.waitKey(30) & 0xff\n-        if key == 27:\n-            break\n-    else:\n-        print(\'Finished!\')\n-        break\ndiff --git a/FaceRecognition/demo/is_my_face.py b/FaceRecognition/demo/is_my_face.py\ndeleted file mode 100644\nindex d471774..0000000\n--- a/FaceRecognition/demo/is_my_face.py\n+++ /dev/null\n@@ -1,66 +0,0 @@\n-# !/udr/bin/env python3\n-# -*- coding=utf-8 -*-\n-\n-import os, sys\n-import dlib\n-import cv2\n-import tensorflow as tf\n-from train_faces import cnnLayer\n-size = 64\n-\n-x = tf.placeholder(tf.float32, [None, size, size, 3])\n-keep_prob_5 = tf.placeholder(tf.float32)\n-keep_prob_75 = tf.placeholder(tf.float32)\n-\n-output = cnnLayer()  \n-predict = tf.argmax(output, 1)  \n- \n-saver = tf.train.Saver()  \n-sess = tf.Session()  \n-saver.restore(sess, tf.train.latest_checkpoint(\'./ckpt\'))  \n- \n-def is_my_face(image):  \n-    # image shape: (64,64,3)\n-    res = sess.run(predict, \n-                   feed_dict={\n-                        x: [image/255.0], \n-                        keep_prob_5: 1.0, \n-                        keep_prob_75: 1.0})  \n-    if res[0] == 1:  \n-        return True  \n-    else:  \n-        return False  \n- \n-#\xe4\xbd\xbf\xe7\x94\xa8dlib\xe8\x87\xaa\xe5\xb8\xa6\xe7\x9a\x84frontal_face_detector\xe4\xbd\x9c\xe4\xb8\xba\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe6\x8f\x90\xe5\x8f\x96\xe5\x99\xa8\n-detector = dlib.get_frontal_face_detector()\n- \n-cam = cv2.VideoCapture(0)  \n- \n-while True:  \n-    _, img = cam.read()  \n-    gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n-    dets = detector(gray_image, 1)\n-    if not len(dets):\n-        #print(\'Can`t get face.\')\n-        cv2.imshow(\'img\', img)\n-        key = cv2.waitKey(30) & 0xff  \n-        if key == 27:\n-            sys.exit(0)\n- \n-    for i, d in enumerate(dets):\n-        x1 = d.top() if d.top() > 0 else 0\n-        y1 = d.bottom() if d.bottom() > 0 else 0\n-        x2 = d.left() if d.left() > 0 else 0\n-        y2 = d.right() if d.right() > 0 else 0\n-        face = img[x1:y1,x2:y2]\n-        # \xe8\xb0\x83\xe6\x95\xb4\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xb0\xba\xe5\xaf\xb8\n-        face = cv2.resize(face, (size,size))\n-        print(\'Is this my face? %s\' % is_my_face(face))\n- \n-        cv2.rectangle(img, (x2,x1),(y2,y1), (255,0,0),3)\n-        cv2.imshow(\'image\',img)\n-        key = cv2.waitKey(30) & 0xff\n-        if key == 27:\n-            sys.exit(0)\n- \n-sess.close() \ndiff --git a/FaceRecognition/demo/lfw_dataset/.gitignore b/FaceRecognition/demo/lfw_dataset/.gitignore\ndeleted file mode 100644\nindex 8590cd8..0000000\n--- a/FaceRecognition/demo/lfw_dataset/.gitignore\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# ignore all except .gitignore file\n-*\n-!.gitignore\n\\ No newline at end of file\ndiff --git a/FaceRecognition/demo/my_faces/.gitignore b/FaceRecognition/demo/my_faces/.gitignore\ndeleted file mode 100644\nindex 8590cd8..0000000\n--- a/FaceRecognition/demo/my_faces/.gitignore\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# ignore all except .gitignore file\n-*\n-!.gitignore\n\\ No newline at end of file\ndiff --git a/FaceRecognition/demo/other_faces/.gitignore b/FaceRecognition/demo/other_faces/.gitignore\ndeleted file mode 100644\nindex 8590cd8..0000000\n--- a/FaceRecognition/demo/other_faces/.gitignore\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# ignore all except .gitignore file\n-*\n-!.gitignore\n\\ No newline at end of file\ndiff --git a/FaceRecognition/demo/set_other_people.py b/FaceRecognition/demo/set_other_people.py\ndeleted file mode 100644\nindex 77a2702..0000000\n--- a/FaceRecognition/demo/set_other_people.py\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-# -*- codeing: utf-8 -*-\n-import sys\n-import os\n-import cv2\n-import dlib\n- \n-input_dir = \'./lfw_dataset\'\n-output_dir = \'./other_faces\'\n-size = 64\n- \n-if not os.path.exists(output_dir):\n-    os.makedirs(output_dir)\n- \n-#\xe4\xbd\xbf\xe7\x94\xa8dlib\xe8\x87\xaa\xe5\xb8\xa6\xe7\x9a\x84frontal_face_detector\xe4\xbd\x9c\xe4\xb8\xba\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe6\x8f\x90\xe5\x8f\x96\xe5\x99\xa8\n-detector = dlib.get_frontal_face_detector()\n- \n-index = 1\n-for (path, dirnames, filenames) in os.walk(input_dir):\n-    for filename in filenames:\n-        if filename.endswith(\'.jpg\'):\n-            print(\'Being processed picture %s\' % index)\n-            img_path = path+\'/\'+filename\n-            # \xe4\xbb\x8e\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\n-            img = cv2.imread(img_path)\n-            # \xe8\xbd\xac\xe4\xb8\xba\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\xe7\x89\x87\n-            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n-            # \xe4\xbd\xbf\xe7\x94\xa8detector\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xba\xe8\x84\xb8\xe6\xa3\x80\xe6\xb5\x8b dets\xe4\xb8\xba\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n-            dets = detector(gray_img, 1)\n- \n-            #\xe4\xbd\xbf\xe7\x94\xa8enumerate \xe5\x87\xbd\xe6\x95\xb0\xe9\x81\x8d\xe5\x8e\x86\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xae\x83\xe4\xbb\xac\xe7\x9a\x84\xe4\xb8\x8b\xe6\xa0\x87\n-            #\xe4\xb8\x8b\xe6\xa0\x87i\xe5\x8d\xb3\xe4\xb8\xba\xe4\xba\xba\xe8\x84\xb8\xe5\xba\x8f\xe5\x8f\xb7\n-            #left\xef\xbc\x9a\xe4\xba\xba\xe8\x84\xb8\xe5\xb7\xa6\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x9b\xbe\xe7\x89\x87\xe5\xb7\xa6\xe8\xbe\xb9\xe7\x95\x8c\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb \xef\xbc\x9bright\xef\xbc\x9a\xe4\xba\xba\xe8\x84\xb8\xe5\x8f\xb3\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x9b\xbe\xe7\x89\x87\xe5\xb7\xa6\xe8\xbe\xb9\xe7\x95\x8c\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb \n-            #top\xef\xbc\x9a\xe4\xba\xba\xe8\x84\xb8\xe4\xb8\x8a\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe8\xbe\xb9\xe7\x95\x8c\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb \xef\xbc\x9bbottom\xef\xbc\x9a\xe4\xba\xba\xe8\x84\xb8\xe4\xb8\x8b\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe8\xbe\xb9\xe7\x95\x8c\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\n-            for i, d in enumerate(dets):\n-                x1 = d.top() if d.top() > 0 else 0\n-                y1 = d.bottom() if d.bottom() > 0 else 0\n-                x2 = d.left() if d.left() > 0 else 0\n-                y2 = d.right() if d.right() > 0 else 0\n-                # img[y:y+h,x:x+w]\n-                face = img[x1:y1,x2:y2]\n-                # \xe8\xb0\x83\xe6\x95\xb4\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xb0\xba\xe5\xaf\xb8\n-                face = cv2.resize(face, (size,size))\n-                cv2.imshow(\'image\',face)\n-                # \xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\xbe\xe7\x89\x87\n-                cv2.imwrite(output_dir+\'/\'+str(index)+\'.jpg\', face)\n-                index += 1\n- \n-            key = cv2.waitKey(30) & 0xff\n-            if key == 27:\n-                sys.exit(0)\ndiff --git a/FaceRecognition/demo/tmp/.gitignore b/FaceRecognition/demo/tmp/.gitignore\ndeleted file mode 100644\nindex 8590cd8..0000000\n--- a/FaceRecognition/demo/tmp/.gitignore\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# ignore all except .gitignore file\n-*\n-!.gitignore\n\\ No newline at end of file\ndiff --git a/FaceRecognition/demo/train_faces.py b/FaceRecognition/demo/train_faces.py\ndeleted file mode 100644\nindex 9abeca3..0000000\n--- a/FaceRecognition/demo/train_faces.py\n+++ /dev/null\n@@ -1,183 +0,0 @@\n-# !/udr/bin/env python3\n-# -*- coding=utf-8 -*-\n-\n-import tensorflow as tf\n-import cv2\n-import numpy as np\n-import os\n-import random\n-import sys\n-from sklearn.model_selection import train_test_split\n- \n-my_faces_path = \'./my_faces\'\n-other_faces_path = \'./other_faces\'\n-size = 64\n- \n-imgs = []\n-labs = []\n- \n-def getPaddingSize(img):\n-    h, w, _ = img.shape\n-    top, bottom, left, right = (0,0,0,0)\n-    longest = max(h, w)\n- \n-    if w < longest:\n-        tmp = longest - w\n-        # //\xe8\xa1\xa8\xe7\xa4\xba\xe6\x95\xb4\xe9\x99\xa4\xe7\xac\xa6\xe5\x8f\xb7\n-        left = tmp // 2\n-        right = tmp - left\n-    elif h < longest:\n-        tmp = longest - h\n-        top = tmp // 2\n-        bottom = tmp - top\n-    else:\n-        pass\n-    return top, bottom, left, right\n- \n-def readData(path , h=size, w=size):\n-    for filename in os.listdir(path):\n-        if filename.endswith(\'.jpg\'):\n-            filename = path + \'/\' + filename\n- \n-            img = cv2.imread(filename)\n- \n-            top,bottom,left,right = getPaddingSize(img)\n-            # \xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\xa4\xa7\xef\xbc\x8c \xe6\x89\xa9\xe5\x85\x85\xe5\x9b\xbe\xe7\x89\x87\xe8\xbe\xb9\xe7\xbc\x98\xe9\x83\xa8\xe5\x88\x86\n-            img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[0,0,0])\n-            img = cv2.resize(img, (h, w))\n- \n-            imgs.append(img)\n-            labs.append(path)\n- \n-readData(my_faces_path)\n-readData(other_faces_path)\n-# \xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8e\xe6\xa0\x87\xe7\xad\xbe\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe6\x95\xb0\xe7\xbb\x84\n-imgs = np.array(imgs)\n-labs = np.array([[0,1] if lab == my_faces_path else [1,0] for lab in labs])\n-# \xe9\x9a\x8f\xe6\x9c\xba\xe5\x88\x92\xe5\x88\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xb8\x8e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n-train_x,test_x,train_y,test_y = train_test_split(imgs, labs, test_size=0.05, random_state=random.randint(0,100))\n-# \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe5\x9b\xbe\xe7\x89\x87\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x80\xbb\xe6\x95\xb0\xef\xbc\x8c\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe9\xab\x98\xe3\x80\x81\xe5\xae\xbd\xe3\x80\x81\xe9\x80\x9a\xe9\x81\x93\n-train_x = train_x.reshape(train_x.shape[0], size, size, 3)\n-test_x = test_x.reshape(test_x.shape[0], size, size, 3)\n-# \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe5\xb0\x8f\xe4\xba\x8e1\xe7\x9a\x84\xe6\x95\xb0\n-train_x = train_x.astype(\'float32\')/255.0\n-test_x = test_x.astype(\'float32\')/255.0\n- \n-print(\'train size:%s, test size:%s\' % (len(train_x), len(test_x)))\n-# \xe5\x9b\xbe\xe7\x89\x87\xe5\x9d\x97\xef\xbc\x8c\xe6\xaf\x8f\xe6\xac\xa1\xe5\x8f\x96100\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\n-batch_size = 100\n-num_batch = len(train_x) // batch_size\n- \n-x = tf.placeholder(tf.float32, [None, size, size, 3])\n-y_ = tf.placeholder(tf.float32, [None, 2])\n- \n-keep_prob_5 = tf.placeholder(tf.float32)\n-keep_prob_75 = tf.placeholder(tf.float32)\n- \n-def weightVariable(shape):\n-    init = tf.random_normal(shape, stddev=0.01)\n-    return tf.Variable(init)\n- \n-def biasVariable(shape):\n-    init = tf.random_normal(shape)\n-    return tf.Variable(init)\n- \n-def conv2d(x, W):\n-    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding=\'SAME\')\n- \n-def maxPool(x):\n-    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\'SAME\')\n- \n-def dropout(x, keep):\n-    return tf.nn.dropout(x, keep)\n- \n-def cnnLayer():\n-    # \xe7\xac\xac\xe4\xb8\x80\xe5\xb1\x82\n-    W1 = weightVariable([3,3,3,32]) # \xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f(3,3)\xef\xbc\x8c \xe8\xbe\x93\xe5\x85\xa5\xe9\x80\x9a\xe9\x81\x93(3)\xef\xbc\x8c \xe8\xbe\x93\xe5\x87\xba\xe9\x80\x9a\xe9\x81\x93(32)\n-    b1 = biasVariable([32])\n-    # \xe5\x8d\xb7\xe7\xa7\xaf\n-    conv1 = tf.nn.relu(conv2d(x, W1) + b1)\n-    # \xe6\xb1\xa0\xe5\x8c\x96\n-    pool1 = maxPool(conv1)\n-    # \xe5\x87\x8f\xe5\xb0\x91\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\xef\xbc\x8c\xe9\x9a\x8f\xe6\x9c\xba\xe8\xae\xa9\xe6\x9f\x90\xe4\xba\x9b\xe6\x9d\x83\xe9\x87\x8d\xe4\xb8\x8d\xe6\x9b\xb4\xe6\x96\xb0\n-    drop1 = dropout(pool1, keep_prob_5)\n- \n-    # \xe7\xac\xac\xe4\xba\x8c\xe5\xb1\x82\n-    W2 = weightVariable([3,3,32,64])\n-    b2 = biasVariable([64])\n-    conv2 = tf.nn.relu(conv2d(drop1, W2) + b2)\n-    pool2 = maxPool(conv2)\n-    drop2 = dropout(pool2, keep_prob_5)\n- \n-    # \xe7\xac\xac\xe4\xb8\x89\xe5\xb1\x82\n-    W3 = weightVariable([3,3,64,64])\n-    b3 = biasVariable([64])\n-    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)\n-    pool3 = maxPool(conv3)\n-    drop3 = dropout(pool3, keep_prob_5)\n- \n-    # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n-    Wf = weightVariable([8*16*32, 512])\n-    bf = biasVariable([512])\n-    drop3_flat = tf.reshape(drop3, [-1, 8*16*32])\n-    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)\n-    dropf = dropout(dense, keep_prob_75)\n- \n-    # \xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\n-    Wout = weightVariable([512,2])\n-    bout = weightVariable([2])\n-    #out = tf.matmul(dropf, Wout) + bout\n-    out = tf.add(tf.matmul(dropf, Wout), bout)\n-    return out\n- \n-""" main """\n-def cnnTrain():\n-    out = cnnLayer()\n- \n-    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=out, labels=y_))\n-\n-    train_step = tf.train.AdamOptimizer(0.01).minimize(cross_entropy)\n-    # \xe6\xaf\x94\xe8\xbe\x83\xe6\xa0\x87\xe7\xad\xbe\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe7\xad\x89\xef\xbc\x8c\xe5\x86\x8d\xe6\xb1\x82\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8ctf.cast(\xe5\xbc\xba\xe5\x88\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe7\xb1\xbb\xe5\x9e\x8b)\n-    accuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(out, 1), tf.argmax(y_, 1)), tf.float32))\n-    # \xe5\xb0\x86loss\xe4\xb8\x8eaccuracy\xe4\xbf\x9d\xe5\xad\x98\xe4\xbb\xa5\xe4\xbe\x9btensorboard\xe4\xbd\xbf\xe7\x94\xa8\n-    tf.summary.scalar(\'loss\', cross_entropy)\n-    tf.summary.scalar(\'accuracy\', accuracy)\n-    merged_summary_op = tf.summary.merge_all()\n-    # \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x99\xa8\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n-    saver = tf.train.Saver()\n- \n-    with tf.Session() as sess:\n- \n-        sess.run(tf.global_variables_initializer())\n- \n-        summary_writer = tf.summary.FileWriter(\'./tmp\', graph=tf.get_default_graph())\n- \n-        for n in range(10):\n-             # \xe6\xaf\x8f\xe6\xac\xa1\xe5\x8f\x96128(batch_size)\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\n-            for i in range(num_batch):\n-                batch_x = train_x[i*batch_size : (i+1)*batch_size]\n-                batch_y = train_y[i*batch_size : (i+1)*batch_size]\n-                # \xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x90\x8c\xe6\x97\xb6\xe8\xae\xad\xe7\xbb\x83\xe4\xb8\x89\xe4\xb8\xaa\xe5\x8f\x98\xe9\x87\x8f\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x89\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\n-                _,loss,summary = sess.run([train_step, cross_entropy, merged_summary_op],\n-                                           feed_dict={\n-                                               x:batch_x,\n-                                               y_:batch_y, \n-                                               keep_prob_5:0.5,\n-                                               keep_prob_75:0.75})\n-                summary_writer.add_summary(summary, n*num_batch+i)\n-                # \xe6\x89\x93\xe5\x8d\xb0\xe6\x8d\x9f\xe5\xa4\xb1\n-                print("The loss on batch %g is %g" %(i + n*num_batch, loss))\n- \n-                if (n*num_batch+i) % 100 == 0:\n-                    # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n-                    acc = accuracy.eval({x:test_x, y_:test_y, keep_prob_5:1.0, keep_prob_75:1.0})\n-                    print("The acc on batch %g is %g" %(n*num_batch+i, acc))\n-                    # \xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e0.98\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\xb9\xb6\xe9\x80\x80\xe5\x87\xba\n-                    if acc > 0.98 and n > 2:\n-                        saver.save(sess, \'./ckpt/face_model.ckpt\', global_step=n*num_batch+i)\n-                        sys.exit(0)\n-        print(\'accuracy less 0.98, exited!\')\n- \n-\n-if __name__ == \'__main__\':\n-    cnnTrain()\n\\ No newline at end of file\ndiff --git a/FaceRecognition/real_time_face_recognition/detect_face.py b/FaceRecognition/real_time_face_recognition/detect_face.py\nindex f45a8f9..53d8d02 100644\n--- a/FaceRecognition/real_time_face_recognition/detect_face.py\n+++ b/FaceRecognition/real_time_face_recognition/detect_face.py\n@@ -168,7 +168,7 @@ class Network(object):\n         with tf.variable_scope(name):\n             i = inp.get_shape().as_list()\n             alpha = self.make_var(\'alpha\', shape=(i[-1]))\n-            output = tf.nn.relu(inp) + tf.mul(alpha, -tf.nn.relu(-inp))\n+            output = tf.nn.relu(inp) + tf.multiply(alpha, -tf.nn.relu(-inp))\n         return output\n \n     @layer\ndiff --git a/FaceRecognition/real_time_face_recognition/train_your_classifier.ipynb b/FaceRecognition/real_time_face_recognition/train_your_classifier.ipynb\nindex 5977eb1..3d30d5b 100644\n--- a/FaceRecognition/real_time_face_recognition/train_your_classifier.ipynb\n+++ b/FaceRecognition/real_time_face_recognition/train_your_classifier.ipynb\n@@ -16,7 +16,7 @@\n   },\n   {\n    "cell_type": "code",\n-   "execution_count": 1,\n+   "execution_count": 6,\n    "metadata": {},\n    "outputs": [],\n    "source": ['